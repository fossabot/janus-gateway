***REMOVED***
; can be found, default interface to use, debug/logging level and, if
; needed, shared apisecret between application(s) and Janus.
***REMOVED***
configs_folder = ./conf		; Configuration files folder
plugins_folder = ./plugins	; Plugins folder
***REMOVED***
debug_level = 4				; Debug/logging level, valid values are 0-7
;apisecret = janusrocks		; String that all Janus requests must contain
***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED***


; Web server and WebSockets stuff: whether either one should be enabled,
; which ports they should use, whether security should be handled directly
; or demanded to an external application (e.g., web frontend) and what
; should be the base path for the Janus API protocol (plain HTTP only).
; You can also specify the threading model to use for the HTTP webserver:
; by default this is 'unlimited' (which means a thread per connection, as
; specified by the libmicrohttpd documentation), using a number will make
; use of a thread pool instead. Since long polls are involved, make sure
; you choose a value that doesn't keep new connections waiting.
; Please beware that the WebSockets server will only be available if you
; built Janus compiling support for it.
[webserver]
base_path = /janus			; Base path to bind to in the web server (plain HTTP only)
threads = unlimited			; unlimited=thread per connection, number=thread pool
http = yes					; Whether to enable the plain HTTP interface
port = 8088					; Web server HTTP port
https = no					; Whether to enable HTTPS (default=no)
;secure_port = 8889			; Web server HTTPS port, if enabled
ws = yes					; Whether to enable the WebSockets interface
ws_port = 8188				; WebSockets server port
ws_ssl = no					; Whether to enable secure WebSockets
;ws_secure_port = 8989;		; WebSockets server secure port, if enabled


; Janus can also expose an admin/monitor endpoint, to allow you to check
; which sessions are up, which handles they're managing, their current
; status and so on. This provides a useful aid when debugging potential
; issues in Janus. The configuration is pretty much the same as the one
; already presented above for the webserver stuff, as the API is very
; similar: choose the base bath for the admin/monitor endpoint (/admin
; by default), ports, threading model, etc. Besides, you can specify
; a secret that must be provided in all requests as a crude form of
; authorization mechanism, and partial or full source IPs if you want to
; limit access basing on IP addresses. For security reasons, this
; endpoint is disabled by default, enable it by setting admin_http=yes.
[admin]
admin_base_path = /admin		; Base path to bind to in the admin/monitor web server (plain HTTP only)
admin_threads = unlimited		; unlimited=thread per connection, number=thread pool
admin_http = yes					; Whether to enable the plain HTTP interface
admin_port = 7088				; Admin/monitor web server HTTP port
admin_https = no				; Whether to enable HTTPS (default=no)
;admin_secure_port = 8889		; Admin/monitor web server HTTPS port, if enabled
admin_secret = janusoverlord	; String that all Janus requests must contain
***REMOVED***
;admin_acl = 127.,192.168.0.	; Only allow requests coming from this comma separated list of addresses


; Certificate and key to use for DTLS and/or HTTPS/WSS.
***REMOVED***
cert_pem = certs/mycert.pem
cert_key = certs/mycert.key


; Media-related stuff: right now, you can only configure the range of
; ports to use for RTP and RTCP (by default, no range is envisaged).
; If you configure a range in the lines below, remember to uncomment the
; ***REMOVED*** category as well!
;***REMOVED***
;rtp_port_range = 20000-40000


; NAT-related stuff: specifically, you can either manually specify the 
; public IP of the machine (i.e., what would be used in SDP) or
; configure the STUN server to use to gather candidates if the gateway
; is behind a NAT, and srflx candidates are needed. By default, this
; section is commented as the gateway is assumed to be deployed on a
; public network. When configuring the public IP or the STUN
; configuration, remember to uncomment the ***REMOVED*** categoty line as well!
***REMOVED***
;public_ip = 1.2.3.4
***REMOVED***
***REMOVED***

; You can also choose which interfaces or IP addresses should be excluded
; and ignored by the gateway for the purpose of ICE candidates gathering.
; To do so, use the 'ice_ignore_list' setting and pass it a comma-separated
; list of interfaces or IP addresses to ignore. This is especially useful
; if the server hosting the gateway has several interfaces you already
; know will not be used or will simply always slow down ICE (e.g., virtual
; interfaces created by VMware). Partial strings are supported, which
; means that any of the following examples are valid:
***REMOVED***
***REMOVED***
; By default, we ignore all interfaces whose name starts with 'vmnet':
***REMOVED***
