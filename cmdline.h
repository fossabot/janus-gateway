/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "janus"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "janus"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * interface_arg;	/**< @brief Interface to use (will be the public IP).  */
  char * interface_orig;	/**< @brief Interface to use (will be the public IP) original value given at command line.  */
  const char *interface_help; /**< @brief Interface to use (will be the public IP) help description.  */
  int port_arg;	/**< @brief Web server HTTP port (default=8088).  */
  char * port_orig;	/**< @brief Web server HTTP port (default=8088) original value given at command line.  */
  const char *port_help; /**< @brief Web server HTTP port (default=8088) help description.  */
  int secure_port_arg;	/**< @brief Web server HTTPS port (default=no HTTPS).  */
  char * secure_port_orig;	/**< @brief Web server HTTPS port (default=no HTTPS) original value given at command line.  */
  const char *secure_port_help; /**< @brief Web server HTTPS port (default=no HTTPS) help description.  */
  int no_http_flag;	/**< @brief Disable insecure HTTP web server (default=off).  */
  const char *no_http_help; /**< @brief Disable insecure HTTP web server help description.  */
  char * base_path_arg;	/**< @brief Base path to bind to in the web server (default=/janus) .  */
  char * base_path_orig;	/**< @brief Base path to bind to in the web server (default=/janus)  original value given at command line.  */
  const char *base_path_help; /**< @brief Base path to bind to in the web server (default=/janus)  help description.  */
  char * plugins_folder_arg;	/**< @brief Plugins folder (default=./plugins).  */
  char * plugins_folder_orig;	/**< @brief Plugins folder (default=./plugins) original value given at command line.  */
  const char *plugins_folder_help; /**< @brief Plugins folder (default=./plugins) help description.  */
  char * config_arg;	/**< @brief Configuration file to use.  */
  char * config_orig;	/**< @brief Configuration file to use original value given at command line.  */
  const char *config_help; /**< @brief Configuration file to use help description.  */
  char * configs_folder_arg;	/**< @brief Configuration files folder (default=./conf).  */
  char * configs_folder_orig;	/**< @brief Configuration files folder (default=./conf) original value given at command line.  */
  const char *configs_folder_help; /**< @brief Configuration files folder (default=./conf) help description.  */
  char * cert_pem_arg;	/**< @brief HTTPS/DTLS certificate.  */
  char * cert_pem_orig;	/**< @brief HTTPS/DTLS certificate original value given at command line.  */
  const char *cert_pem_help; /**< @brief HTTPS/DTLS certificate help description.  */
  char * cert_key_arg;	/**< @brief HTTPS/DTLS certificate key.  */
  char * cert_key_orig;	/**< @brief HTTPS/DTLS certificate key original value given at command line.  */
  const char *cert_key_help; /**< @brief HTTPS/DTLS certificate key help description.  */
  char * stun_server_arg;	/**< @brief STUN server(:port) to use, if needed (e.g., gateway behind NAT, default=none).  */
  char * stun_server_orig;	/**< @brief STUN server(:port) to use, if needed (e.g., gateway behind NAT, default=none) original value given at command line.  */
  const char *stun_server_help; /**< @brief STUN server(:port) to use, if needed (e.g., gateway behind NAT, default=none) help description.  */
  char * public_ip_arg;	/**< @brief Public address of the machine, to use in SDP.  */
  char * public_ip_orig;	/**< @brief Public address of the machine, to use in SDP original value given at command line.  */
  const char *public_ip_help; /**< @brief Public address of the machine, to use in SDP help description.  */
  char * rtp_port_range_arg;	/**< @brief Port range to use for RTP/RTCP.  */
  char * rtp_port_range_orig;	/**< @brief Port range to use for RTP/RTCP original value given at command line.  */
  const char *rtp_port_range_help; /**< @brief Port range to use for RTP/RTCP help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int interface_given ;	/**< @brief Whether interface was given.  */
  unsigned int port_given ;	/**< @brief Whether port was given.  */
  unsigned int secure_port_given ;	/**< @brief Whether secure-port was given.  */
  unsigned int no_http_given ;	/**< @brief Whether no-http was given.  */
  unsigned int base_path_given ;	/**< @brief Whether base-path was given.  */
  unsigned int plugins_folder_given ;	/**< @brief Whether plugins-folder was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */
  unsigned int configs_folder_given ;	/**< @brief Whether configs-folder was given.  */
  unsigned int cert_pem_given ;	/**< @brief Whether cert-pem was given.  */
  unsigned int cert_key_given ;	/**< @brief Whether cert-key was given.  */
  unsigned int stun_server_given ;	/**< @brief Whether stun-server was given.  */
  unsigned int public_ip_given ;	/**< @brief Whether public-ip was given.  */
  unsigned int rtp_port_range_given ;	/**< @brief Whether rtp-port-range was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
